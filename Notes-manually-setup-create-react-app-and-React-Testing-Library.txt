
1. Tutorial: https://www.robinwieruch.de/vitest-react-testing-library/
             Scroll down to "Vitest vs React Testing Library" then click
               "Vitest With Reac Testing Library" link
                https://www.robinwieruch.de/vitest-react-testing-library/
                for brief walkthrough on how to setup React Testing Library

             After you are done with the walkthrough to setup React Testing Library
             go back to https://www.robinwieruch.de/react-testing-library/
             
             Scroll down to: "React Testing Library: Rendering a Component"

   Walkthrough to setup React Testing Library (https://www.robinwieruch.de/vitest-react-testing-library/ )
2. Install Vitest: 
      npm install vitest --save-dev

3. Add the following script tp package.json
     "scripts": {
    "test": "vitest",
  },

4. create App.test.jsx and add the following code:
     import { describe, it, expect } from 'vitest';

    describe('something truthy and falsy', () => {
    it('true to be true', () => {
        expect(true).toBe(true);
    });

    it('false to be false', () => {
        expect(false).toBe(false);
    });
    });
 
5. run the test they should turn out green: 
    npm run dev 
    npm run test 

6. Still in Walkthrough to setup React Testing Library scroll down to 
   "Vitest with React Testing Library"

    - first since React Testing Library tests React components, we need to enable 
      HTML in Vitest with a library like jsdom. First, install the library on 
      the command line:

        npm install jsdom --save-dev

    - Second, include it to the Vite configuration file vite.config.js
         test: {
                environment: 'jsdom',
            },

    - Third install React Testing Library on the command line:
        npm install @testing-library/react @testing-library/jest-dom --save-dev

    - Fourth Fourth, add a test setup file in tests/setup.js and give it the following implementation:
         md src/tests
         touch setup.js

    - And last, include this new test setup file in Vite's configuration file. 
      In addition, make all imports from Vitest global, so that you don't need to 
      perform these imports (e.g. expect) in each file manually anymore:
         test: {
            globals: true,
            environment: 'jsdom',
            setupFiles: './tests/setup.js',
        },

     - That's it. You can render React components in Vitest now. 
       Add the following code to App.test.jsk

        describe('App', () => {
            it('renders headline', () => {
                render(<App title="React" />);

                screen.debug();

                // check if App components renders headline
            });
            });
   
          npm run dev 
          npm run test 

  ============================================
   Manually Setup Webpack and Babel 
  ============================================
  7. After testing above scroll down a little bit more and click 
     "Continue Reading: Testing React Components with React Testing Library"
     This will take you back to "https://www.robinwieruch.de/react-testing-library/"
  
  8. Read this link again and go to "Custom React Setup" to setup JEST 
     and React Testing Library" yourself.  
        - you can download a React Boilerplate project from 
          github https://github.com/rwieruch/minimal-react-webpack-babel-setup.
          This boiler project has already webpack and babel setup. But dont use it.
          Create your own React project using create-react-app and set it up yourself.
       
     STEP1:
        npx create-react-app manually-setup-react-app
          
        Bring up code in VS Studio Code and understand the project files:
        A good reference in pluralsight in React is:
           https://app.pluralsight.com/ilx/video-courses/clips/a028fa58-7f10-4613-9d46-0b4885bba5a7          
    
 
     STEP2: Install important extensions"
          npm install -g prettier
          go to VSCode and install "Prettier Code Formatter" and "Prettier Eslint" extensions

     STEP3: React With Babel  - https://www.robinwieruch.de/minimal-react-webpack-babel-setup/#react-with-babel
         npm install --save-dev @babel/preset-react
        

     STEP4: React with Webpack

     STEP5: Hot Module Replacement